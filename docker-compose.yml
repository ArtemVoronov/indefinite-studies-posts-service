version: "3.9"
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 32181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 32181:32181

  # TODO: add authenication config
  kafka:
    image: confluentinc/cp-kafka:latest
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:32181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://${KAFKA_HOST}:${KAFKA_PORT}
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    ports:
      - 39092:39092
    depends_on:
      - zookeeper

  postgres:
    image: postgres
    environment:
      POSTGRES_USER: "${DATABASE_USER}"
      POSTGRES_PASSWORD: "${DATABASE_PASSWORD}"
      POSTGRES_MULTIPLE_DATABASES: "${DATABASE_NAME_PREFIX}_1,${DATABASE_NAME_PREFIX}_2,${DATABASE_NAME_PREFIX}_3,${DATABASE_NAME_PREFIX}_4,${DATABASE_NAME_PREFIX}_tags_unique_shard"
    volumes:
      - ./scripts/docker-postgresql-multiple-databases:/docker-entrypoint-initdb.d
      - database-volume:/var/lib/postgresql/data

  redis:
    image: redis:6.2-alpine
    ports:
      - '6379:6379'
    command:
      [
        "redis-server",
        "/usr/local/etc/redis/redis.conf",
        "--save",
        "\"\"",
        "--appendonly",
        "no"
      ]
    volumes:
      - redis-volume:/redis/data
      - ./configs/redis/redis.conf:/usr/local/etc/redis/redis.conf
      - ./configs/redis/users.acl:/usr/local/etc/redis/users.acl

  api:
    build: .
    deploy:
      mode: replicated
      replicas: 2
    ports:
      - "3009-3010:3005"
      - "50055-50056:50051"
    depends_on:
      - liquibase_posts_shard_1
      - liquibase_posts_shard_2
      - liquibase_posts_shard_3
      - liquibase_posts_shard_4
      - liquibase_tags_unique_shard
      - postgres
      - redis

  liquibase_posts_shard_1:
    image: liquibase/liquibase
    volumes:
      - ./docker/liquibase/migrations/posts:/liquibase/changelog
    command:
      [
        "liquibase",
        "--username=${DATABASE_USER}",
        "--password=${DATABASE_PASSWORD}",
        "--changeLogFile=changelog/db.changelog-root.xml",
        "--url=${DATABASE_URL}_1",
        "update"
      ]
    depends_on:
      - postgres

  liquibase_posts_shard_2:
    image: liquibase/liquibase
    volumes:
      - ./docker/liquibase/migrations/posts:/liquibase/changelog
    command:
      [
        "liquibase",
        "--username=${DATABASE_USER}",
        "--password=${DATABASE_PASSWORD}",
        "--changeLogFile=changelog/db.changelog-root.xml",
        "--url=${DATABASE_URL}_2",
        "update"
      ]
    depends_on:
      - postgres

  liquibase_posts_shard_3:
    image: liquibase/liquibase
    volumes:
      - ./docker/liquibase/migrations/posts:/liquibase/changelog
    command:
      [
        "liquibase",
        "--username=${DATABASE_USER}",
        "--password=${DATABASE_PASSWORD}",
        "--changeLogFile=changelog/db.changelog-root.xml",
        "--url=${DATABASE_URL}_3",
        "update"
      ]
    depends_on:
      - postgres

  liquibase_posts_shard_4:
    image: liquibase/liquibase
    volumes:
      - ./docker/liquibase/migrations/posts:/liquibase/changelog
    command:
      [
        "liquibase",
        "--username=${DATABASE_USER}",
        "--password=${DATABASE_PASSWORD}",
        "--changeLogFile=changelog/db.changelog-root.xml",
        "--url=${DATABASE_URL}_4",
        "update"
      ]
    depends_on:
      - postgres

  liquibase_tags_unique_shard:
    image: liquibase/liquibase
    volumes:
      - ./docker/liquibase/migrations/tags:/liquibase/changelog
    command:
      [
        "liquibase",
        "--username=${DATABASE_USER}",
        "--password=${DATABASE_PASSWORD}",
        "--changeLogFile=changelog/db.changelog-root.xml",
        "--url=${DATABASE_URL}_tags_unique_shard",
        "update"
      ]
    depends_on:
      - postgres

  nginx:
    image: nginx
    volumes:
      - ./configs/templates/nginx:/etc/nginx/templates
    ports:
      - "10004:80"
    environment:
      - HOST_API=${HOST_API}
    depends_on:
      - api

  nginxGRPC:
    image: nginx
    volumes:
      - ./configs/templates/nginxGRPC:/etc/nginx/templates
      - ./configs/tls:/etc/nginx/certs
    ports:
      - "10005:1443"
    environment:
      - HOST_API=${HOST_API}
    depends_on:
      - api

volumes:
  database-volume:
  redis-volume:
networks:
  default:
    name: indefinite-studies-posts-service-network
